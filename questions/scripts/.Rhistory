if(is.null(x) && x>0) TRUE
x = NULL
if(!is.null(x) && x>0) TRUE
if(!is.null(x) && x>0) print('x')
if(!is.null(x) && x>0) print('x' ) else print('y')
x = 10
if(!is.null(x) && x>0) print('x' ) else print('y')
data(BOD)
?data
data()
data
data(AirPassengers)
?promise
data("AirPassengers")
?promises
substitute(data("AirPassengers"))
delayedAssign('x', mean(1:5))
substitute(x)
x
delayedAssign('x', mean(1:5))
e1 = environment()
e2 = environment()
delayedAssign('x', mean(1:5), eval.env = e1, assign.env = e2)
e1
e2
substituteDirect(x, frame=e1)
substituteDirect(x, frame=e2)
e2
e2$x
e1$.Random.seed
?environment
e1 = new.env()
e2 = new.env()
ls(e1)
ls()
delayedAssign('x', mean(1:5), eval.env=e1, assign.env = e2)
ls(e1)
ls(e2)
x
rm(x)
e1 = new.env()
e2 = new.env()
delayedAssign('x', mean(1:5), eval.env=e1, assign.env = e2)
ls(e1, all.names=T)
ls(e2)
delayedAssign('x', mean(1:5), assign.env = e2)
?promise
y = delayedAssign('x', mean(1:5))
class(y)
typeof(y)
gete <- function(e_)
lapply(lapply(ls(e_), as.name),
function(n) eval(substitute(substitute(X, e_), list(X=n))))
gete()
gete(.GlobalEnv)
exps = gete(.GlobalEnv)
sapply(exps, typeof)
typeof(x)
typeof(y)
as.name(y)
datasets::airmiles
data()
sapply(ls(), function(x) format(object.size(get(x)), units = 'Mb'))
?format
f = function(x=z) z=100; x=z
f = function(x=z){z=100;z=z}
f = function(x=z){z=100;x=z}
f()
f = function(x=z){z=100;x=z;x}
f()
f = function(x){
y=100
x
}
f(10)
f = function(x){
delayedAssign('y', 100, assign.env = .GlobalEnv)
x
}
f(10)
f = function(x){
delayedAssign('y', 100)
x
}
f(10)
rm(y)
f = function(x){
delayedAssign('y', 100)
x
}
f(10)
?delayedAssign
e2 = env.new()
e2 = new.env()
sd(1:10)
side_effect = function(){
m = mean(1:10)
sd = sd(1:10)
sd
}
f = function(x){
delayedAssign('se', side_effect(), eval.env = e2, assign.env=.GlobalEnv)
x
}
f(10)
se
e2
ls(e2)
side_effect = function(){
m <<- mean(1:10)
sd = sd(1:10)
sd
}
rm(se)
f = function(x){
delayedAssign('se', side_effect(), eval.env = e2, assign.env=.GlobalEnv)
x
}
f(10)
ls(e2)
se
ls(e2)
f = function(x){
delayedAssign('se', {z=10;20} eval.env = e2, assign.env=.GlobalEnv)
x
}
f = function(x){
delayedAssign('se', {z=10;20;} eval.env = e2, assign.env=.GlobalEnv)
x
}
f(10)
f = function(x){
delayedAssign('se', {z=10;20;} eval.env = e2, assign.env=.GlobalEnv)
x
}
?expression
expression(z=10;20)
expression(z=10;20;)
expression("z=10;20;")
eval(expression("z=10"))
expression(z=10)
eval(expression(z=10))
eval(expression(z=10;20))
f = function(x){
delayedAssign('se', {z=10;20;}, eval.env = e2, assign.env=.GlobalEnv)
x
}
f(10)
rm(m)
se
ls(e2)
e2$z
?promise
source('~/.active-rstudio-document')
env = new.env()
f = function(x){
delayedAssign(
'var',
{z = 1:20; mean(1:6)},
eval.env = env,
assign.env = .GlobalEnv
)
x
}
rm(list = ls())
f = function(x){
avg = delayedAssign(
'var',
{z = 1:20; mean(1:6)},
eval.env = env,
assign.env = .GlobalEnv
)
x
}
f(10)
env = new.env()
f = function(x){
avg = delayedAssign(
'var',
{z = 1:20; mean(1:6)},
eval.env = env,
assign.env = .GlobalEnv
)
x
}
f(10)
ls()
ls(env)
env = new.env()
f = function(x){
delayedAssign(
'var',
{z = 1:20; mean(1:6)},
eval.env = env,
assign.env = .GlobalEnv
)
x
}
f(10)
ls()
var
ls()
#variable z is defined in 'env' environment
ls(env)
z
reprex::reprex()
reprex::reprex(advertise=FALSE)
x = carbonate::carbon$new()
x$browse()
reprex::reprex(advertise=FALSE)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
reprex::reprex(advertise=FALSE)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
reprex::reprex(advertise = F)
install.packages('cowsay')
install.packages('fortune')
library(cowsay)
say('Hello World')
say('what')
fortune
library(fortune)
library(fortunes)
fortune()
fortune('is')
fortune(memeory)
fortune('memory')
read.fortunes()
x = read.fortunes()
View(x)
1:0
x[33,'quote']
fortune('R-help')
?fortune
fortune(which=50)
reprex::reprex({library(fortunes); fortune(which=59)})
reprex::reprex({library(fortunes);
fortune(which=59)})
reprex::reprex({library(fortunes);
fortune(which=59)})
reprex::reprex({library(fortunes);
fortune(which=59)},advertise=FALSE)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
52
reprex::reprex({library(fortunes);
fortune(which=52)},advertise=FALSE)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
reprex::reprex({library(fortunes);
fortune(which=73)},advertise=FALSE)
reprex::reprex({library(fortunes);
fortune(which=72)},advertise=FALSE)
x$browse()
library(carbonate)
x=carbon$new()
x$set_template('cobalt')
x$browse()
character(0)
isFALSE('a' == character(0))
isTRUE('a' == character(0))
NULL == NULL
'a' == NULL
isTRUE(logical(0))
isFALSE(logical(0))
logical(0)
as.numeric(logical(0))
logical(1)
isTRUE(logical(1))
logical(1)
logical(10)
?logical
logical(0L)
logical(logical(0))
as.logical(logical(0))
isTRUE(0)
isFALSE(0)
?isTRUE
raw(2)
isTRUE
isTRUE(1)
is.logical(1)
1
reprex::reprex({isTRUE;})
reprex::reprex({isTRUE;
isFALSE}, advertise=FALSE)
x = carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
'a' == character(0)
is.logical(0)
class(logical(0))
is.logical(logical(0))
length(logical(0)) == 1L
!logical(0)
logical(0)
length(0) == 1L
0
!0
is.logical(0)
isFALSE(0)
isTRUE(0)
'a' == logical(1)
is.logical(logical(0))
str(mtcars)
ml = lm(mpg ~ cyl + disp + I(cyl*disp), mtcars)
summary(ml)
ml2 = lm(mpg ~ cyl*disp, mtcars)
summary(ml2)
summary(ml2) -> s
s$coefficients
s$coefficients['cyl']
s$coefficients['Estimates']
s$coefficients['Estimate']
s$coefficients -> y
y['cyl', 'Estimate']
y[2,1]
y[2,1] + y[3,1] + y[4,1]
colSums(y)
predict(c(1,1), ml2)
?predict
predict(ml2)
y[2,1] + y[3,1] + y[4,1]
str(mtcars)
mtcars
predict(ml2, c(1,1))
predict(ml2, newdata = c(1,1))
nd = data.frame('cyl' = 1, 'disp' = 1)
predict(ml2, newdata=nd)
colSums(y[,1])
colSums(y)
y[2,1]*2 + y[3,1]*3 + y[4,1]*6 + y[1,1]
nd = data.frame('cyl' = 2, 'disp' = 3)
predict(ml2, newdata=nd)
ml2 = lm(mpg ~ cyl*disp, mtcars)
ml2$call
reprex::reprex()
reprex::reprex(advertise=FALSE)
x = carbonate::carbon$new()
x$set_template('cobalt')
s = summary(ml2)
c = s$coefficients
nd = data.frame('cyl'=2,'disp'=3)
predict(ml2, nd)
c[1,1] + c[2,1]*2 + c[3,1]*3 + c[4,1]*6
?I
c(1:6):c(1:6)
nd = data.frame('cyl'=c(1:6),'disp'=c(7:12))
predict(ml2, nd)
c[1,1] + c[2,1]*C(1:6) + c[3,1]*C(7:12) + c[4,1]*C(1:6)*C(7:12)
c[1,1] + c[2,1]*c(1:6) + c[3,1]*c(7:12) + c[4,1]*c(1:6)*c(7:12)
c(1:6)*c(7:12)
interaction(LETTERS, 1:26)
interaction(1:6, 7:12)
x$browse()
m = lm(mpg ~ cyl, mtcars)
summary(m)
?evalq
return(1)
evalq(return(1))
str(mtcars)
ml = lm(mpg ~ cyl + disp + hp + drat, data = mtcars)
summary(ml)
ml = lm(mpg ~ cyl + disp + hp, data = mtcars)
summary(ml)
str(mtcars)
ml = lm(mpg ~ cyl + disp + wt, data = mtcars)
summary(ml)
summary(lm(mpg~.,mtcars))
summary(ml)
reprex(summary(ml))
reprex::reprex(summary(ml))
reprex::reprex({summary(lm(mpg~cyl+disp+wt, mtcars))})
reprex::reprex({summary(lm(mpg~cyl+disp+wt, mtcars))}, advertise=FALSE)
x = carbonate::carbon$new()
x$set_template('cobalt')
reprex::reprex({summary(lm(mpg~cyl+disp+wt, mtcars))}, advertise=FALSE)
x = carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
x = 1:1000
y = x + rnorm
y = x + rnorm(1000)
x = 1:1000 + rnorm(1000)
x2 = 2*(1:1000) + rnorm(1000)
lm(y~x)
summary(lm(y~x))
summary(lm(y~x+x2))
x = (1:1000)^2 + rnorm(1000)
x2 = sqrt((1:1000)) + rnorm(1000)
summary(lm(y~x))
summary(lm(y~x+x2))
source('~/.active-rstudio-document', echo=TRUE)
model.1 <- lm(yy~1)
abline(model.1,col="red",lty=2)
summary(model.1)
model.2 <- lm(yy~xx)
summary(model.2)
x = (1:1000)^2
x = (1:1000)^2 + rnorm(1000)
y = (1:1000)
summary(lm(y~x))
summary(lm(y~x + rnorm(1000)))
summary(lm(y~x + 1000rnorm(1000)))
summary(lm(y~x + 1000*rnorm(1000)))
summary(lm(y~x + (1000*rnorm(1000))))
z = 1000*rnorm(1000)
summary(lm(y~x+z))
#partial matching examples:
## list
x = list('a' = 1, 'bbe' = 2, 'b' = 3)
x$b
#partial matching examples:
## list
x = list('a' = 1, 'bbe' = 2, 'c' = 3)
x$b
## vectors
x = c('name' = 'dsqad', 'profession' = 'nothing')
x$n
x[['na']]
x[['name']]
## dataframes
x = data.frame('a' = 1:5, 'bbe' = 5:10, 'c' = 3)
## dataframes
x = data.frame('a' = 1:5, 'bbe' = 5:9, 'c' = 3)
x$b
## as function arguments
apply(mtcars, M = 2, mean)
apply(mtcars)
mean(1:10, t = 0.5) #mean has a trim argument, so t matches with trim
reprex::reprex(advertise=FALSE)
x = carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
library(magrittr)
x %<>% mtcars
x = mtcars %>% summary(cyl)
summary(lm(mpg ~ cyl, mtcars))
cor(mpy ~ cyl, mtcars)
cor(mpy ~ cyl,data=mtcars)
cor(mtcars$mpg, mtcars$cyl)
?cor
cor(mtcars$mpg, mtcars$cyl)^2
.81^2
install.packages('caret')
library(caret)
?R2
ya = 1:20
yp = ya + rnorm(20)
sse = (ya-yp)^2
sse = sum((ya-yp)^2)
sst = sum((ya - mean(ya))^2)
1 - (sse/sst)
R2(yp, ya)
R2(ya, yp)
R2(yp, ya, formula = "traditional")
cor(yp,ya)^2
cor(yp,ya)
sqrt(0.9750839)
summary(lm(mpg ~ cyl, mtcars))
summary(lm(mpg ~ .), mtcars)
summary(lm(mpg ~ ., mtcars))
getwd()
tble = read.table('../Downloads/heightgpa.txt', header=TRUE)
tble
summary(lm(height ~ ., tble))
getwd()
write.csv(mtcars, '../GitHub/Courses/missing-semester/lecture3/mtcars.csv')
as.logical(c('TRUE', 'True', 'true', 'T'))
?as.logical
logical('true')
reprex::reprex({as.logical(c("TRUE", "True", "T", "true"))}, advertise=FALSE)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
reprex::reprex({as.logical(c("TRUE", "True", "T", "true"));
as.logical(c("FALSE", "False", "F", "false"))}, advertise=FALSE)
reprex::reprex({as.logical(c("TRUE", "True", "T", "true"));
as.logical(c("FALSE", "False", "F", "false"))}, advertise=FALSE)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
as.logical('true')
x = c(1,2,3,4,5,20)
apply(mtcars, FU='mean', MAR=2)
?mean
mean(mtcars, tr = 0.5, rm = T)
mean(c(1,2,3,4,NA), rm=T)
mean(c(1,2,3,4,NA), na=T)
mean(c(1,2,3,4,NA), na.rm=T)
reprex::reprex({apply(mtcars, FU='mean', MAR=2)}, advertise=F)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
apply(mtcars, F='mean', M=2)
apply(mtcars, FU=mean, MAR=2)
apply(mtcars, FUN=mean, MARGIN=2)
reprex::reprex(advertise=F)
x=carbonate::carbon$new()
x$set_template('cobalt')
x$browse()
isTRUE(c(FALSE, FALSE))
isTRUE(c(T,T))
setwd('../GitHub/dsqad_db/questions/scripts')
list.files()
file.edit("q_24082020.R")
source('C:/Users/mohit/GitHub/dsqad_db/questions/scripts/q_24082020.R', echo=TRUE)
