a = NULL
for(i in 1:n) a[i] = i^2
a
}
})
z = carbon(x)
rep()
rep = function(expr) reprex::reprex(x = eval(expr), advertise=FALSE)
rep(1)
?deparse
rep = function(expr) reprex::reprex(x = as.expression(expr), advertise=FALSE)
rep(1)
?reprex::reprex
rep = function(expr) reprex::reprex(input = expr, advertise=FALSE)
rep(1)
rep = function(expr) reprex::reprex(input = as.character(expr), advertise=FALSE)
rep(1+2)
rep(1+2; 2)
rep("1+2\n")
x = rep({
sequence_for = function(n){
a = NULL
for(i in 1:n) a[i] = i^2
a
}
})
library(reprex)
reprex
substitute(1+2)
eval(substitute(1+3))
x = reprex({
sequence_for = function(n){
a = NULL
for(i in 1:n) a[i] = i^2
a
}
},advertise=F)
z = carbon(x)
x = reprex({
microbenchmark::microbenchmark(
"sequence_for" = sequence_for(100),
"sequence_vect" = (1:100)^2
)
},advertise=F)
z = carbon(x)
x = reprex({
sequence_for_len = function(n){
a = numeric(n)
for(i in 1:n) a[i] = i^2
a
}
microbenchmark::microbenchmark(
"sequence_for" = sequence_for(100),
"sequence_for_len"= sequence_for_len(100),
"sequence_vect" = (1:100)^2
)
}, advertise=F)
z = carbon(x)
x = reprex({
inside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = 2*pi*sin(i)
a
}
outside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = sin(i)
2*pi*a
}
microbenchmark::microbenchmark(
"inside" = inside(100),
"outside" = outside(100)
)
}, advertise=F)
z = carbon(x)
x = reprex({
dframes_combine1 = function(template, ...){
to_combine = list(...)
for(i in 1:length(to_combine)){
template = rbind(template, to_combine[[i]])
}
template
}
dframes_combine2 = function(template, ...){
to_combine =list(template, ...)
template = do.call("rbind", to_combine)
}
template = data.frame(x = 1,
y = 1)
df1 = data.frame(x = 2,
y = 2)
df2 = data.frame(x = 3,
y = 3)
df3 = data.frame(x = 4,
y = 4)
microbenchmark::microbenchmark(
"combine1" = dframes_combine1(template, df1, df2, df3),
"combine2" = dframes_combine2(template, df1, df2, df3)
)
}, advertise=F)
z = carbon(x)
x = reprex({
sequence_for = function(n){
a = NULL
for(i in 1:n) a[i] = i^2
a
}
},advertise=F)
z = carbon(x)
x = reprex({
sequence_for = function(n){
a = NULL
for(i in 1:n) a[i] = i^2
a
}
microbenchmark::microbenchmark(
"sequence_for" = sequence_for(100),
"sequence_vect" = (1:100)^2
)
},advertise=F)
z = carbon(x)
x = reprex({
sequence_for = function(n){
a = NULL
for(i in 1:n) a[i] = i^2
a
}
sequence_for_len = function(n){
a = numeric(n)
for(i in 1:n) a[i] = i^2
a
}
microbenchmark::microbenchmark(
"sequence_for" = sequence_for(100),
"sequence_for_len"= sequence_for_len(100),
"sequence_vect" = (1:100)^2
)
}, advertise=F)
z = carbon(x)
x = reprex({
inside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = 2*pi*sin(i)
a
}
outside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = sin(i)
2*pi*a
}
microbenchmark::microbenchmark(
"inside" = inside(100),
"outside" = outside(100)
)
}, advertise=F)
z = carbon(x)
x = reprex({
dframes_combine1 = function(template, ...){
to_combine = list(...)
for(i in 1:length(to_combine)){
template = rbind(template, to_combine[[i]])
}
template
}
dframes_combine2 = function(template, ...){
to_combine =list(template, ...)
template = do.call("rbind", to_combine)
}
template = data.frame(x = 1,
y = 1)
df1 = data.frame(x = 2,
y = 2)
df2 = data.frame(x = 3,
y = 3)
df3 = data.frame(x = 4,
y = 4)
microbenchmark::microbenchmark(
"combine1" = dframes_combine1(template, df1, df2, df3),
"combine2" = dframes_combine2(template, df1, df2, df3)
)
}, advertise=F)
z = carbon(x)
x = reprex({
inside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = 2*pi*sin(i)
a
}
outside = function(n){
b = numeric(n)
for(i in 1:n) b[i] = sin(i)
2*pi*b
}
microbenchmark::microbenchmark(
"inside" = inside(10000),
"outside" = outside(10000)
)
}, advertise=F)
z = carbon(x)
x = reprex({
inside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = 2*pi*sin(i)
a
}
outside = function(n){
b = numeric(n)
for(i in 1:n) b[i] = sin(i)
2*pi*b
}
microbenchmark::microbenchmark(
"inside" = inside(100),
"outside" = outside(100)
)
}, advertise=F)
z = carbon(x)
x = reprex({
inside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = 2*pi*sin(i)
a
}
outside = function(n){
b = numeric(n)
for(i in 1:n) b[i] = sin(i)
2*pi*b
}
microbenchmark::microbenchmark(
"inside" = inside(1000000),
"outside" = outside(1000000)
)
}, advertise=F)
z = carbon(x)
x = reprex({
inside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = 1 + sqrt(i)
a
}
outside = function(n){
b = numeric(n)
for(i in 1:n) b[i] = sqrt(i)
1 + b
}
microbenchmark::microbenchmark(
"inside" = inside(10000),
"outside" = outside(10000)
)
}, advertise=F)
z = carbon(x)
i = 3
1 + sqrt(i)
inside(3)
outside(3)
inside
inside = function(n){
a = numeric(n)
for(i in 1:n) a[i] = 1 + sqrt(i)
a
}
outside = function(n){
b = numeric(n)
for(i in 1:n) b[i] = sqrt(i)
1 + b
}
inside(3)
outside(3)
source('~/.active-rstudio-document', echo=TRUE)
cat(s2)
s1 == s2
?cat
cat("\this")
cat("\D\documents")
cat("\\D\documents")
cat("\\D\\documents")
cat(factor(c("A", "B")))
print(factor(c("A", "B")))
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
print(s2)
x <- "ab\bc\ndef"
print(x)
cat(x) # interprets escapes
cat(encodeString(x), "\n", sep = "")
?Reserved
FALSE = 4
?return
return(2)
return (2/5)
return (2/5)*3:9
return (2/5) * 3:9
return(a)
a = 1
return(a)
as.integer(2.3)
as.integer(2.6)
round(2.6)
(2-.1)/.1
xr <- lapply(11:14, function(i) function() i^2)
xr
?forece
?force
f = function(y) function() y
f(1)
f()(1)
f(1)()
f(2)()
reprex::reprex(advertise=F)
y = matrix(1:6, 3,2)
x1 = data.frame(x = 101:103, y=y)
x2 = data.frame(x = 101:103)
x2$y = y
x1
x2
reprex::reprex(advertise=F)
str(mtcars)
ggplot(mtcars) +
geom_line(aes(mpg, hp))
library(ggplot2)
ggplot(mtcars) +
geom_line(aes(mpg, hp))
ggplot(mtcars) +
geom_line(aes(mpg, hp)) +
geom_line(aes(factor(vs), disp))
ggplot(mtcars) +
#geom_line(aes(mpg, hp)) +
geom_line(aes(factor(vs), disp))
ggplot(mtcars) +
#geom_line(aes(mpg, hp)) +
geom_line(aes(factor(vs), disp)) +
geom_line(aes(mpg, hp))
ggplot(mpg) +
geom_point(aes(class, cty)) +
geom_boxplot(aes(trans, hwy))
str(mpg)
ggplot(mpg) +
#geom_point(aes(class, cty)) +
geom_boxplot(aes(trans, hwy)) +
geom_point(aes(class, cty))
ggplot(mpg) +
#geom_point(aes(class, cty)) +
geom_boxplot(aes(trans, hwy)) +
geom_point(aes(class, cty))
?geom_jitter
?geom_count
ggplot(mpg, aes(cty, hwy)) +
geom_point()
ggplot(mpg, aes(cty, hwy)) +
geom_count()
ggplot(mpg, aes(cty, hwy)) +
geom_count() +
scale_size_area()
library(ggplot2)
str(mpg)
#Option A
ggplot(mpg) +
geom_point(aes(model, displ)) +
geom_point(aes(cty, hwy))
#option B
ggplot(mpg) +
geom_point(aes(cty, hwy)) +
geom_point(aes(model, displ))
?%+%
library(ggplot2)
?aes_
?Reduce
source('~/.active-rstudio-document', echo=TRUE)
ggplot(mpg) +
geom_point(aes(model, displ)) +
geom_point(aes(cty, hwy))
cat(mpg$model)
cat(factor(mpg$model))
range(mpg$cty)
ggplot(mpg) +
geom_point(aes(model, displ)) +
geom_point(aes(cty, hwy)) +
theme(axis.text.x = element_text(angle=90))
str(mpg)
ggplot(mpg) +
geom_point(aes(model, displ), color="red") +
geom_point(aes(cty, hwy), color="blue") +
theme(axis.text.x = element_text(angle=90))
mpg[which(mpg$model == "corolla"), c("cty", "hwy", "displ")]
ggplot(mpg) +
geom_point(aes(model, displ), color="red") +
geom_point(aes(cty, hwy), color="blue") +
theme(axis.text.x = element_text(angle=90)) +
coord_cartesian(xlim=c(5,12), ylim=c(0,15))
ggplot(mpg) +
geom_point(aes(model, displ), color="red") +
geom_point(aes(cty, hwy), color="blue") +
theme(axis.text.x = element_text(angle=90)) +
coord_cartesian(xlim=c(5,12), ylim=c(0,20))
mpg[which(mpg$model == "corolla"), c("cty", "hwy", "displ")]
mpg[which(mpg$model == "corolla"), c("model, "cty", "hwy", "displ")]
mpg[which(mpg$model == "corolla"), c("model", "cty", "hwy", "displ")]
as.numeric(mpg$model[["corolla"]])
as.numeric(mpg$model)
class(mpg$model)
ggplot(mpg) +
geom_point(aes(factor(model), displ), color="red") +
geom_point(aes(cty, hwy), color="blue") +
theme(axis.text.x = element_text(angle=90)) +
coord_cartesian(xlim=c(5,12), ylim=c(0,20))
library(ggplot2)
?position_dodge
source('~/.active-rstudio-document', echo=TRUE)
?position_nudge
points = geom_point(position = "dodge",
color = "blue",
size = 3)
ggplot(mpg, aes(cty, hwy)) + points
points = geom_point(position = "jitter",
color = "steelblue",
size = 2)
ggplot(mpg, aes(cty, hwy)) + points
str(mpg)
ggplot(mpg, aes(displ, cty)) + points
x = 1:3
y = 4:6
x + y
z = 7:9
x + y %+% z
x^y %+% z
?expression
expression(c(1,2,3))
f = function(x) 10
formals(f)$x
nargs(length)
formals(print)
?brick
?rle
c(1,2) == NULL
(1:3)[c(1,2,NA)<2]
?prod
prod(1:10)
prod(numeric(0))
FALSE && NA
as.logical(123)
is.TRUE(23)
isTRUE(12)
isTRUE
?.Last.value
base::R.version
x = installed.packages()
View(x)
?downloader
library(downloader)
?downloader
a <- c(TRUE, FALSE, FALSE, NA, FALSE, TRUE, NA, FALSE, TRUE)
a == TRUE
is.element()
?is.element
?NaN
is.infinite(NA)
is.finite(NA)
is.finite(NaN)
is.infinite(NaN)
x = list(a=character(0), b=NA, c=1)
is.na(x)
length(NA)
is.na(c(character(0), NA, 1))
c(character(0))
x = numeric(0)
sum(x)
mean(x)
var(x)
0L %/% 0L
4L %/% 0L # 0L  (NA from R 2.15)
x = c(NA, NaN, Inf)
is.finite(x)
x[4] = 1
is.finite(x)
?NaN
NaN + 1
Inf + 1
-Inf + Inf
-Inf/Inf
is.finite(c(1, NA, NaN, Inf))
is.infinite(c(1, NA, NaN, -Inf))
reprex::reprex(
is.finite(c(1, NA, NaN, Inf))
)
reprex::reprex(advertise=F)
x = c(1,2, NA, NA)
x == NA
?NA
library(ggplot2)
?geoms
source('~/.active-rstudio-document', echo=TRUE)
ggplot(mtcars, aes(mpg, vs)) + p.a
str(mtcars)
ggplot(mtcars, aes(mpg, qsec)) + p.a
ggplot(mtcars, aes(mpg, wt)) + p.a
ggplot(mtcars, aes(mpg, hp)) + p.a
ggplot(mtcars, aes(mpg, disp)) + p.a
#optin A
p.a <- list(
geom_point(),
geom_line(method="lm", se=FALSE)
)
#optin A
p.a <- list(
geom_point(),
geom_smooth(method="lm", se=FALSE)
)
ggplot(mtcars, aes(mpg, disp)) + p.a
getwd()
setwd('./GitHub/dsqad_db/images/questions')
setwd('../GitHub/dsqad_db/images/questions')
getwd9)
getwd()
ggsave('q_01012021_2.png', width=300, height=180, units='mm')
